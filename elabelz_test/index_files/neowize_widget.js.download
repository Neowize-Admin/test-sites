/*
This code is an example of a NeoWize widget that shows related products.
You may change or modify it any way you like to fit your style and needs.

This example code is provided by NeoWize, 2017.
**/

// widget scope
(function() {

    // which feature to use (this widget support 'featured_items_by_categories' and 'related_items', for other features
    // you need to use different code).
    var feature = "related_items";

    // this var is true when dragging the widget, used to disable links while dragging.
    var wasDragged = false;

    // init widget
    function initNeowizeWidget() {

        // if neowize is not loaded yet, or we still don't have user id, retry
        if (typeof Neowize === "undefined" || !Neowize.User || !Neowize.User.get_id()) {
            return setTimeout(initNeowizeWidget, 50);
        }

        // short alias for jquery (we take Neowize internal jquery object)
        var $ = Neowize.$;

        // set API params
        var data = {

            // api and user id
            api_key: Neowize.api_key,
            user_id: Neowize.User.get_id(),

            // request items full data and not just ids
            item_data: true,

            // how many results to return. change this number to show different amount of items.
            results_count: 5,

            // when using featured items: categories to show. change this value to limit results to specific categories.
            // note: this param is a list of lists (list of category groups).
            category_groups: [[]],

            // when using related items: item id to get related items for. make sure this is the same id as you use
            // in your feeder files.
            item_id: dataLayer[0].sku,

            // language code.
            // note: if this param is omitted NeoWize will use the default language provided in the main feeder file.
            //locale: window.neo_wize_locale,
            locale: window.neo_wize_locale.substr(0, 2),

            // currency code to return prices in
            // note: if this param is omitted NeoWize will use the default currency provided in the main feeder file
            currency: window.neo_wize_currency,
        };

        // calculate default width for products divs inside the widget, based on how many results we want
        var widthProperty = Math.round(100 / data.results_count) + "%";

        // call NeoWize API to get items data to show
        Neowize.Server.api(feature, data, function(response) {

                // got error? print to console and return.
                if (response.code !== 0) {
                    // TBD: you can add code here to handle what to do if we get error from server.
                    // console.log("NeoWize got error from API:", response.msg);
                    return;
                }

                // didn't get any results? stop here
                if (response.data === undefined || response.data.length === 0)
                {
                    // TBD: you can add code here to handle what to do if we get no results.
                    // console.log("NeoWize got no products to show at this time.");
                    return;
                }

                // get the template html
                var template = $("#neowize-product-container-template");

                // get the main container div (eg what contains the entire widget)
                var container = $("#neowize-widget-container-products");
                    // create a table that convert currency codes into their right sign / arabic locale
                var locale = window.neo_wize_locale.substr(0, 2);
                var currencyLocale = (locale === "en") ?
                    // English
                    {
                        AED: 'AED',
                        USD: '$',
                        SAR: 'SAR',
                        KWD: 'KWD',
                        QAR: 'QAR',
                    } :
                    // Arabic
                    {
                        AED: 'د.إ ',
                        USD: '$',
                        SAR: 'ر.س',
                        KWD: 'د.ك',
                        QAR: 'ر.ق',
                    };

                // iterate results
                $.each(response.data, function(i, val) {

                    // get current product data
                    var prodUrl = val.url;
                    var prodName = val.name;
                    var prodImage = val.img_url;
                    var prodPrice = val.price;
                    // var prodCurrency = val.currency;
                    var prodCurrency = currencyLocale[val.currency] || val.currency || "";


                    // duplicate template
                    var curr = template.clone();

                    // add current product div to container
                    container.append(curr);

                    // set product fields
                    curr.find(".neowize-product-link").attr("href", prodUrl);
                    curr.find(".neowize-product-pic").attr("src", prodImage);
                    curr.find(".neowize-product-title").text(prodName);
                    // curr.find(".neowize-product-price").text("Price: " + prodPrice + " " + (prodCurrency || ""));
                    // curr.find(".neowize-product-price").text(prodPrice + " " + (prodCurrency || ""));
                    if (locale === "en") {
                        curr.find(".neowize-product-price").text(prodCurrency + ' ' + prodPrice );
                    }
                    else {
                        curr.find(".neowize-product-price").text(prodPrice + ' ' + prodCurrency);
                    }
                    curr.attr("id", "neowize-widget-prod-" + i);
                    curr.css("width", widthProperty);

                    // add event on all links to disable them while dragging
                    curr.find('a').click(function() {
                        if (wasDragged) {
                            return false;
                        }
                    });

                    // turn product visible
                    curr.show();
                });

                // only when done, show the widget div
                container.parent().show();

                // enable widget scroll via dragging (instead of ugly default scrollbar)
                enableDragScroll();
            });
    }


    // make the widget scrollable via dragging (note: call this after widget is ready and loaded with products).
    function enableDragScroll()
    {
        // short alias for jquery (we take Neowize internal jquery object)
        var $ = Neowize.$;

        // get the widget container
        var widget = $("#neowize-widget-container-products");

        // hide / show side arrows when scrolling is available
        function showOrHideArrows() {

            // get scrollbar width and current left
            var scrollWidth = widget[0].scrollWidth;
            var scrollPos = Math.abs(widget.scrollLeft());

            // if there's scrolling, show the needed arrows.
            if (scrollWidth > widget.width()) {

                // extra pixels threshold to hide arrows.
                var pixelsThreshold = 5;

                // get both arrows
                var leftArrow = $("#neowize-widget-arrow-left");
                var rightArrow = $("#neowize-widget-arrow-right");

                // special case - in firefox and ie there's a known bug the scrollbar is reversed
                Neowize.__scroll_factor = 1;
                if (location.href.indexOf('/ar_') !== -1) {
                    if ((Neowize.Utils.Browser.browser.name.indexOf("Firefox") !== -1) ||
                        (Neowize.Utils.Browser.browser.name.indexOf("Safari") !== -1)) {
                            var temp = leftArrow;
                            leftArrow = rightArrow;
                            rightArrow = temp;
                    }
                    if (Neowize.Utils.Browser.browser.name === "IE") {
                            Neowize.__scroll_factor = -1;
                            var temp = leftArrow;
                            leftArrow = rightArrow;
                            rightArrow = temp;
                    }
                }

                // should we show left arrow?
                if (scrollPos > pixelsThreshold) {
                    leftArrow.fadeIn(250);
                }
                else {
                    leftArrow.fadeOut(250);
                }

                // should we show right arrow?
                if (scrollPos < scrollWidth - widget[0].clientWidth - pixelsThreshold) {
                    rightArrow.fadeIn(250);
                }
                else {
                    rightArrow.fadeOut(250);
                }
            }
            // if there's no scrolling at all, hide both arrows
            else {
                $(".neowize-arrow-container").parent().hide();
            }
        }

        // add actions to arrow left and right buttons
        $("#neowize-widget-arrow-right").click(function() {
            widget.animate({"scrollLeft": widget.scrollLeft() + 250 * Neowize.__scroll_factor}, 500, showOrHideArrows);
        });
        $("#neowize-widget-arrow-left").click(function() {
            widget.animate({"scrollLeft": widget.scrollLeft() - 250 * Neowize.__scroll_factor}, 500, showOrHideArrows);
        });

        // initially call to show/hide side arrows, and also register it to resize event
        showOrHideArrows();
        $( window ).resize(showOrHideArrows);

        // are we currently dragging + start dragging position X
        var clicked = false;
        var clickX = 0;
        var scrolledTotalDistance = 0;

        // get mouse / touch position X from event, regardless if mobile or desktop.
        function getPosFromEvent(e)
        {
            return e.pageX || e.originalEvent.touches[0].pageX;
        }

        // update scroll position
        var updateScrollPos = function(e, el) {

            // do the scrolling
            var $el = $(el);
            var scrollDistance = (clickX - getPosFromEvent(e)) * Neowize.__scroll_factor;
            $el.scrollLeft($el.scrollLeft() + scrollDistance);
            clickX = getPosFromEvent(e);

            // how much we total scrolled the widget. this is used to disable links while dragging.
            scrolledTotalDistance += Math.abs(scrollDistance);
            if (scrolledTotalDistance > 4) {
                wasDragged = true;
            }

            // show / hide left and right scrolling arrows
            showOrHideArrows();
        };

        // function to handle finish dragging
        function finishDragging()
        {
            clicked = false;
            scrolledTotalDistance = 0;
            setTimeout(function() {wasDragged = false;}, 50);
        }

        // register events for the dragging:
        widget.on({
          // when mouse move and we are clicking on widget, dragging
          'mousemove': function(e) {
            clicked && updateScrollPos(e, this);
          },
          // when mouse is pressed we start dragging
          'mousedown': function(e) {
            clicked = true;
            clickX = getPosFromEvent(e);
          },
          // when mouse is released we stop dragging
          'mouseup': finishDragging,
          'mouseleave': finishDragging,
        });

        // register events for the dragging - for mobile:
        widget.on({
          'touchmove': function(e) {
            clicked && updateScrollPos(e, this);
          },
          // when mouse is pressed we start dragging
          'touchstart': function(e) {
            clicked = true;
            clickX = getPosFromEvent(e);
          },
          // when touch is released we stop dragging
          'touchend': finishDragging,
        });
    }

    // call widget init function
    initNeowizeWidget();
})();